#!/usr/bin/env python3

# Released under the MIT license. See LICENSE file accompanying this project.

import argparse
import atexit
import os
import re
import shutil
import socket
import subprocess
import tempfile
import time
import sys


# Source: https://stackoverflow.com/a/30540928
GET_BG_COLOR_SCRIPT = r'''
#!/bin/sh
oldstty=$(stty -g)
Ps=${1:-11}
stty raw -echo min 0 time 0
printf "\033]$Ps;?\033\\"
sleep 0.1
read -r answer
result=${answer#*;}
stty $oldstty
echo $result | sed 's/[^rgb:0-9a-f/]\+$//'
'''.strip()


def get_bg_terminal_color():
    tmpdir = tempfile.mkdtemp(prefix='bgcolor-')
    atexit.register(shutil.rmtree, tmpdir)

    script = tmpdir + '/script'
    output = tmpdir + '/output'

    with open(script, 'w') as f:
        f.write(GET_BG_COLOR_SCRIPT)
        f.write(f" > {output}")
    os.chmod(script, 0o500)

    subprocess.run(script)

    # This behaves differently if we use pipes for the
    # subprocess, so we have to pipe the output to a file.
    with open(output, 'r') as f:
        rgb_line = f.read()
        m = re.match('rgb:(.{2}).{2}\/(.{2}).{2}\/(.{2}).{2}', rgb_line)

    return '#{}{}{}'.format(*m.groups())

def set_host(host):
    print(f'\033]7;file://{host}\007', end='')

def set_bg_color(color):
    print(f"\033]11;{color}\a", end='')

def is_interactive(pid, hostname):
    """
    Verify that this SSH connection is interactive. Returns True if the
    background should be changed, and False otherwise. Things that make a
    connection Non-interactive:

    - It's a forwarding connection (ProxyForward, -W, netcat)
    - The user requested a remote command (ssh foo.com ls)
    """
    cmdline = open("/proc/{}/cmdline".format(pid), "r").read().split('\0')

    hostname_index = None
    try:
        hostname_index = cmdline.index(hostname)
    except ValueError:
        # Hostname not found in commandline arguments. Maybe the username was
        # included (user@hostname)?
        for index, arg in enumerate(cmdline):
            if arg.split('@')[-1] == hostname:
                hostname_index = index
    if hostname_index is None:
        return

    ssh_args = cmdline[:hostname_index]
    rest_args = cmdline[hostname_index + 1:]

    # ProxyForward with "ssh -W"
    if "-W" in ssh_args:
        return False

    # Remote execute command or ProxyForward with netcat
    if rest_args != [""]:
        return False

    return True


def wait_parent_pid(parent_pid):
    """
    Wait until `parent_pid` has exited.
    """
    while True:
        try:
            os.kill(parent_pid, 0)
        except OSError:
            # Parent pid (ssh) exited
            return
        time.sleep(0.5)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Change profile or colors on SSH connect.')
    parser.add_argument('hostname', help='Hostname being connected to.')
    parser.add_argument('--alias', help="Alias hostname to inform Tilix we are connecting to.")
    parser.add_argument('--remotebg', help="RGB background color for the terminal on connect.")
    parser.add_argument('--localbg', help="RGB background color for the terminal on disconnect. Will try to determine this automatically if not defined.")

    args = parser.parse_args()

    # Get our parent pid, which is the PID for the ssh process.
    ssh_pid = os.getppid()

    # Verify that this is not a forwarding connection.
    if not is_interactive(ssh_pid, args.hostname):
        # Don't do anything or SSH will wait for our forked child.
        sys.exit(0)

    # Do we want to set the background color?
    if args.remotebg:
        localbg = args.localbg or get_bg_terminal_color()
        set_bg_color(args.remotebg)

    set_host((args.alias or args.hostname) + '/')

    # Fork into the background so we can wait for the ssh process to exit.
    pid = os.fork()
    if pid == 0:
        # Reset the background color on exit.
        atexit.register(set_host, socket.gethostname())
        if args.remotebg:
            atexit.register(set_bg_color, localbg)
        wait_parent_pid(ssh_pid)
