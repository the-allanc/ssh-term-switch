#!/usr/bin/env python3

# Released under the MIT license. See LICENSE file accompanying this project.

import os
import socket
import time
import sys


def set_host(host):
    print(f'\033]7;file://{host}\007', end='')


def is_interactive(pid, hostname):
    """
    Verify that this SSH connection is interactive. Returns True if the
    background should be changed, and False otherwise. Things that make a
    connection Non-interactive:

    - It's a forwarding connection (ProxyForward, -W, netcat)
    - The user requested a remote command (ssh foo.com ls)
    """
    cmdline = open("/proc/{}/cmdline".format(pid), "r").read().split('\0')

    hostname_index = None
    try:
        hostname_index = cmdline.index(hostname)
    except ValueError:
        # Hostname not found in commandline arguments. Maybe the username was
        # included (user@hostname)?
        for index, arg in enumerate(cmdline):
            if arg.split('@')[-1] == hostname:
                hostname_index = index
    if hostname_index is None:
        return

    ssh_args = cmdline[:hostname_index]
    rest_args = cmdline[hostname_index + 1:]

    # ProxyForward with "ssh -W"
    if "-W" in ssh_args:
        return False

    # Remote execute command or ProxyForward with netcat
    if rest_args != [""]:
        return False

    return True


def wait_parent_pid(parent_pid):
    """
    Wait until `parent_pid` has exited.
    """
    while True:
        try:
            os.kill(parent_pid, 0)
        except OSError:
            # Parent pid (ssh) exited
            return
        time.sleep(0.5)


if __name__ == "__main__":
    # Arguments
    if len(sys.argv) < 1:
        sys.exit("Usage: {} <hostname>".format(sys.argv[0]))
    hostname = sys.argv[1]

    # Get our parent pid, which is the PID for the ssh process.
    ssh_pid = os.getppid()

    # Verify that this is not a forwarding connection.
    if not is_interactive(ssh_pid, hostname):
        # Don't do anything or SSH will wait for our forked child.
        sys.exit(0)

    set_host(hostname + '/')

    # Fork into the background so we can wait for the ssh process to exit.
    pid = os.fork()
    if pid == 0:
        # Child process. Wait for ssh process to exit
        wait_parent_pid(ssh_pid)
        # Reset the background color
        set_host(socket.gethostname())
